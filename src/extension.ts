// src/extension.ts
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { Octokit } from '@octokit/rest';
import { getGitHubToken } from './auth/tokenManager';
import { getRepoInfo } from './github/getRepoInfo';
import { getRunIdFromQuickPick } from './github/getRunList';
import { getFailedStepsAndPrompts } from './log/getFailedLogs';
import { printToOutput } from './output/printToOutput';

export function activate(context: vscode.ExtensionContext) {
  const disposable = vscode.commands.registerCommand('extension.analyzeGitHubActions', async () => {
    console.log('[1] üîç ÌôïÏû• Ïã§ÌñâÎê®');
    
    const repo = await getRepoInfo();
    if (!repo) {
      vscode.window.showErrorMessage('GitHub Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }
    console.log(`[2] ‚úÖ Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Í∞êÏßÄÎê®: ${repo.owner}/${repo.repo}`);

    const token = await getGitHubToken(context);
    if (!token) {
      vscode.window.showErrorMessage('GitHub ÌÜ†ÌÅ∞Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    console.log(`[3] üîë GitHub ÌÜ†ÌÅ∞ ÌôïÎ≥¥Îê® (Í∏∏Ïù¥: ${token.length})`);

    const octokit = new Octokit({ auth: token });

    const run_id = await getRunIdFromQuickPick(octokit, repo.owner, repo.repo);
    if (!run_id) {
      vscode.window.showInformationMessage('ÏÑ†ÌÉùÎêú ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§ÌñâÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }
    console.log(`[4] ‚úÖ ÏÑ†ÌÉùÎêú Run ID: ${run_id}`);

    const mode = await vscode.window.showQuickPick(['Ï†ÑÏ≤¥ Î°úÍ∑∏', 'ÎßàÏßÄÎßâ 20Ï§Ñ'], {
      placeHolder: 'LLM ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ìè¨Ìï®Ìï† Î°úÍ∑∏ Î≤îÏúÑ ÏÑ†ÌÉù'
    });
    const logMode = mode === 'Ï†ÑÏ≤¥ Î°úÍ∑∏' ? 'all' : 'tail';
    console.log(`[5] üìÑ Î°úÍ∑∏ Ï∂îÏ∂ú Î∞©Ïãù: ${logMode}`);

    const { failedSteps, prompts } = await getFailedStepsAndPrompts(
      octokit,
      repo.owner,
      repo.repo,
      run_id,
      logMode
    );
    console.log(`[6] üìõ Ïã§Ìå®Ìïú Step Í∞úÏàò: ${failedSteps.length}`);
    console.log(`[7] ‚ú® ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± ÏôÑÎ£å (${prompts.length}Í∞ú)`);

    printToOutput(`Run #${run_id} Ïã§Ìå®Ìïú Step Î™©Î°ù`, failedSteps);
    printToOutput(`Run #${run_id} ‚Üí LLM ÌîÑÎ°¨ÌîÑÌä∏`, prompts);
    vscode.window.showInformationMessage(`‚úÖ Î∂ÑÏÑù ÏôÑÎ£å: ${failedSteps.length}Í∞ú Ïã§Ìå® step`);
  });

  context.subscriptions.push(disposable);

  // 0. ÏõπÎ∑∞ Í∞úÎ∞ú ÏãúÏûë Ï†Ñ ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Hello World ÌéòÏù¥ÏßÄ
  const helloWorldCommand = vscode.commands.registerCommand('extension.helloWorld', () => {
    const panel = vscode.window.createWebviewPanel(
      'helloWorld',
      'Hello World',
      vscode.ViewColumn.One,
      {
        enableScripts: true
      }
    );

    panel.webview.html = getWebviewContent(context);
    
    // Hello World webview Î©îÏãúÏßÄ Ï≤òÎ¶¨
    panel.webview.onDidReceiveMessage(
      message => {
        switch (message.command) {
          case 'showMessage':
            vscode.window.showInformationMessage(message.text);
            return;
        }
      },
      undefined,
      context.subscriptions
    );
  });

  context.subscriptions.push(helloWorldCommand);

  // 1. GitHub Actions Workflow Editor Î™ÖÎ†πÏñ¥ : ÏûÑÏãú ÌéòÏù¥ÏßÄ 
  const workflowEditorCommand = vscode.commands.registerCommand('extension.openWorkflowEditor', () => {
    const panel = vscode.window.createWebviewPanel(
      'workflowEditor',
      'GitHub Actions Workflow Editor',
      vscode.ViewColumn.One,
      {
        enableScripts: true,
        retainContextWhenHidden: true
      }
    );

    panel.webview.html = getWorkflowEditorContent(context);
    
    // webviewÏôÄ ÌôïÏû•Í∞Ñ Î©îÏãúÏßÄ ÌÜµÏã† ÏÑ§Ï†ï
    panel.webview.onDidReceiveMessage(
      message => {
        switch (message.command) {
          case 'submitPrompt':
            vscode.window.showInformationMessage(`LLM Prompt submitted: ${message.text}`);
            return;
          case 'saveWorkflow':
            vscode.window.showInformationMessage('Workflow saved successfully!');
            return;
        }
      },
      undefined,
      context.subscriptions
    );
  });

  context.subscriptions.push(workflowEditorCommand);

  function getWebviewContent(context: vscode.ExtensionContext) {
    const htmlPath = path.join(context.extensionPath, 'src', 'webview', 'hello.html');
    return fs.readFileSync(htmlPath, 'utf8');
  }

  function getWorkflowEditorContent(context: vscode.ExtensionContext) {
    const htmlPath = path.join(context.extensionPath, 'src', 'webview', 'workflow_editor.html');
    return fs.readFileSync(htmlPath, 'utf8');
  }
}

export function deactivate() {
  console.log('üì¥ GitHub Actions ÌôïÏû• Ï¢ÖÎ£åÎê®');
}
