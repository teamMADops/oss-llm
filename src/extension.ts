// ÏàòÏ†ï ÏòàÏ†ï
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { Octokit } from '@octokit/rest';
import { getSavedRepo, promptAndSaveRepo,deleteSavedRepo, type RepoRef} from './github/getRepoInfo';
import { getOctokitViaVSCodeAuth } from './auth/githubSession';
import { getRunIdFromQuickPick } from './github/getRunList';
import { printToOutput } from './output/printToOutput';       
import { spawn } from 'child_process';
import * as crypto from 'crypto';


function resolveServerBase(context: vscode.ExtensionContext) {
  const cfg = vscode.workspace.getConfiguration('oss');
  const fromSetting = cfg.get<string>('serverBase');
  if (fromSetting) return fromSetting;
  if (process.env.SERVER_BASE) return process.env.SERVER_BASE;
  return context.extensionMode === vscode.ExtensionMode.Development
    ? 'http://localhost:4310'
    : 'https://YOUR-DEPLOYED-API.example.com';
}

export function activate(context: vscode.ExtensionContext) {

  
  // Î†àÌè¨ Îì±Î°ù/ÏàòÏ†ï
  const cmdSetRepo = vscode.commands.registerCommand('extension.setRepository', async () => {
    await promptAndSaveRepo(context);
  });

  // Î†àÌè¨ ÏÇ≠Ï†ú
  const cmdClearRepo = vscode.commands.registerCommand('extension.clearRepository', async () => {
    await deleteSavedRepo(context);
  });

  // Î†àÌè¨ Î≥¥Í∏∞(ÏÑ†ÌÉù)
  const cmdShowRepo = vscode.commands.registerCommand('extension.showRepository', async () => {
    const cur = getSavedRepo(context);
    vscode.window.showInformationMessage(`ÌòÑÏû¨ Î†àÌè¨: ${cur ? cur.owner + '/' + cur.repo : '(none)'}`);
  });

  context.subscriptions.push(cmdSetRepo, cmdClearRepo, cmdShowRepo);

  const disposable = vscode.commands.registerCommand
  ('extension.analyzeGitHubActions', 
    async (repoArg?: RepoRef) => {
    console.log('[1] üîç ÌôïÏû• Ïã§ÌñâÎê®');

    
    // Ïö∞ÏÑ†ÏàúÏúÑ: Î™ÖÎ†π Ïù∏Ïûê > Ï†ÄÏû•Îêú Î†àÌè¨
    const repo = repoArg ?? getSavedRepo(context);
    if (!repo) {
      vscode.window.showWarningMessage('Ï†ÄÏû•Îêú Î†àÌè¨Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä Î†àÌè¨Î•º Îì±Î°ùÌïòÏÑ∏Ïöî.');
      return;
    }
    console.log(`[2] ‚úÖ Î†àÌè¨: ${repo.owner}/${repo.repo}`);

    // GitHub Ïù∏Ï¶ù ÏÑ∏ÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
    const octokit = await getOctokitViaVSCodeAuth();
    if (!octokit) {
    vscode.window.showErrorMessage('GitHub Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    return;
    }
    console.log('[3] üîë VS Code GitHub ÏÑ∏ÏÖò ÌôïÎ≥¥');

    const run_id = await getRunIdFromQuickPick(octokit, repo.owner, repo.repo);
    if (!run_id) {
      vscode.window.showInformationMessage('ÏÑ†ÌÉùÎêú ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§ÌñâÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }
    console.log(`[4] ‚úÖ ÏÑ†ÌÉùÎêú Run ID: ${run_id}`);

    const mode = await vscode.window.showQuickPick(['Ï†ÑÏ≤¥ Î°úÍ∑∏', 'ÏóêÎü¨ Î©îÏÑ∏ÏßÄÎßå'], {
      placeHolder: 'LLM ÌîÑÎ°¨ÌîÑÌä∏Ïóê Ìè¨Ìï®Ìï† Î°úÍ∑∏ Î≤îÏúÑ ÏÑ†ÌÉù'
    });

    
    const logMode = mode === 'Ï†ÑÏ≤¥ Î°úÍ∑∏' ? 'all' : 'error';
    
    console.log(`[5] üìÑ Î°úÍ∑∏ Ï∂îÏ∂ú Î∞©Ïãù: ${logMode}`);

  //   const { failedSteps, prompts } = await getFailedStepsAndPrompts(
  //     octokit,
  //     repo.owner,
  //     repo.repo,
  //     run_id,
  //     logMode
  //   );

  //   console.log(`[6] üìõ Ïã§Ìå®Ìïú Step Í∞úÏàò: ${failedSteps.length}`);
  //   console.log(`[7] ‚ú® ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ± ÏôÑÎ£å (${prompts.length}Í∞ú)`);

  //   printToOutput(`Run #${run_id} Ïã§Ìå®Ìïú Step Î™©Î°ù`, failedSteps);
  //   printToOutput(`Run #${run_id} ‚Üí LLM ÌîÑÎ°¨ÌîÑÌä∏`, prompts);
  //   vscode.window.showInformationMessage(`‚úÖ Î∂ÑÏÑù ÏôÑÎ£å: ${failedSteps.length}Í∞ú Ïã§Ìå® step`); // ÏõπÎ∑∞Ïóê ÎùÑÏõåÏ£ºÎäîÍ±¥Í∞ê

   // ÏÑúÎ≤ÑÎ°ú Î∂ÑÏÑù ÏöîÏ≤≠ (LLM Î∂ÑÏÑùÏùÄ ÏÑúÎ≤ÑÏóêÏÑú ÏàòÌñâ)
    const SERVER_BASE = resolveServerBase(context);

    // Î°úÍ∑∏ Ï∞çÎäîÍ≤® 
    printToOutput('SERVER_BASE', [resolveServerBase(context)]);


    if (!/^https?:\/\//.test(SERVER_BASE) || SERVER_BASE.includes('YOUR-DEPLOYED-API')) {
      vscode.window.showErrorMessage(`SERVER_BASEÍ∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§: ${SERVER_BASE}`);
      return;
    }

    await vscode.window.withProgress(
      { location: vscode.ProgressLocation.Notification, title: `Run #${run_id} Î∂ÑÏÑù Ï§ë...` },
      async (progress) => {
        try {
          progress.report({ message: 'ÏÑúÎ≤ÑÏóê Î∂ÑÏÑù ÏöîÏ≤≠ Ï†ÑÏÜ°' });

          // Î°úÍ∑∏ Ï∞çÎäîÍ±∞
          console.log("[EXT] üì§ ÏÑúÎ≤ÑÎ°ú Î∂ÑÏÑù ÏöîÏ≤≠ Ï†ÑÏÜ°", {
            url: `${SERVER_BASE}/api/analyze-run`,
            owner: repo.owner,
            name: repo.repo,
            runId: run_id,
            logMode
          });

          const res = await fetch(`${SERVER_BASE}/api/analyze-run`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              // ÏÑúÎ≤Ñ Ïä§ÌÇ§Îßà Ï£ºÏùò: repo.nameÏù¥Ïñ¥Ïïº Ìï®
              repo: { owner: repo.owner, name: repo.repo },
              runId: run_id,
              logMode
            })
          });
          
          // Î°úÍ∑∏ Ï∞çÎäîÍ±∞
          console.log("[EXT] üì• ÏÑúÎ≤Ñ ÏùëÎãµ ÏàòÏã†", res.status, res.statusText);
          
          if (!res.ok) {
            const err = await res.json().catch(() => null);
            // Î°úÍ∑∏Ïö©
            printToOutput('analyze-run FAIL', [
            `${res.status} ${res.statusText}`,
              err || '(no body)'
            ]);throw new Error(err?.error ?? res.statusText);
          }

          progress.report({ message: 'LLM ÏùëÎãµ ÏàòÏã†' });
          const data: any = await res.json(); // { correlationId?, runId, analysis, ... }
          const analysis = data?.analysis;

          if (!analysis) {
            vscode.window.showInformationMessage('Î∂ÑÏÑùÌï† Ïã§Ìå® StepÏù¥ ÏóÜÏäµÎãàÎã§.');
            return;
          }

          // Ï∂úÎ†•Ï∞ΩÏóê Ï†ÑÏ≤¥ Í≤∞Í≥º(JSON) Îç§ÌîÑ
          printToOutput('LLM Î∂ÑÏÑù Í≤∞Í≥º', [JSON.stringify(analysis, null, 2)]);

          // ÏöîÏïΩÎßå ÌåùÏóÖÏúºÎ°ú
          const summary = analysis.summary ?? 'LLM Î∂ÑÏÑùÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.';
          const choice = await vscode.window.showInformationMessage(`üß† ${summary}`, 'Ï∂úÎ†•Ï∞Ω Ïó¥Í∏∞', 'ÏöîÏïΩ Î≥µÏÇ¨');
          if (choice === 'Ï∂úÎ†•Ï∞Ω Ïó¥Í∏∞') {
            vscode.commands.executeCommand('workbench.action.output.toggleOutput');
          } else if (choice === 'ÏöîÏïΩ Î≥µÏÇ¨') {
            await vscode.env.clipboard.writeText(summary);
            vscode.window.showInformationMessage('üìã ÏöîÏïΩÏùÑ ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÌñàÏñ¥Ïöî.');
          }
        } catch (e: any) {
          vscode.window.showErrorMessage(`‚ùå Î∂ÑÏÑù Ïã§Ìå®: ${e?.message ?? e}`);
        }
      }
    );
  });

  context.subscriptions.push(disposable);

  // 0. ÏõπÎ∑∞ Í∞úÎ∞ú ÏãúÏûë Ï†Ñ ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú Hello World ÌéòÏù¥ÏßÄ
  const helloWorldCommand = vscode.commands.registerCommand('extension.helloWorld', () => {
    const panel = vscode.window.createWebviewPanel(
      'helloWorld',
      'Hello World',
      vscode.ViewColumn.One,
      {
        enableScripts: true
      }
    );

    panel.webview.html = getWebviewContent(context);
    
    // Hello World webview Î©îÏãúÏßÄ Ï≤òÎ¶¨
    panel.webview.onDidReceiveMessage(
      message => {
        switch (message.command) {
          case 'showMessage':
            vscode.window.showInformationMessage(message.text);
            return;
        }
      },
      undefined,
      context.subscriptions
    );
  });

  context.subscriptions.push(helloWorldCommand);

  // 1. GitHub Actions Workflow Editor Î™ÖÎ†πÏñ¥ : ÏûÑÏãú ÌéòÏù¥ÏßÄ 
  const workflowEditorCommand = vscode.commands.registerCommand('extension.openWorkflowEditor', () => {
    const panel = vscode.window.createWebviewPanel(
      'workflowEditor',
      'GitHub Actions Workflow Editor',
      vscode.ViewColumn.One,
      {
        enableScripts: true,
        retainContextWhenHidden: true
      }
    );

    panel.webview.html = getWorkflowEditorContent(context, panel);
    
    // webviewÏôÄ ÌôïÏû•Í∞Ñ Î©îÏãúÏßÄ ÌÜµÏã† ÏÑ§Ï†ï
    panel.webview.onDidReceiveMessage(
      message => {
        switch (message.command) {
          case 'submitPrompt':
            vscode.window.showInformationMessage(`LLM Prompt submitted: ${message.text}`);
            return;
          case 'saveWorkflow':
            vscode.window.showInformationMessage('Workflow saved successfully!');
            return;
        }
      },
      undefined,
      context.subscriptions
    );
  });

  context.subscriptions.push(workflowEditorCommand);

  function getWebviewContent(context: vscode.ExtensionContext) {
    const htmlPath = path.join(context.extensionPath, 'src', 'webview', 'hello.html');
    return fs.readFileSync(htmlPath, 'utf8');
  }

  function getWorkflowEditorContent(context: vscode.ExtensionContext, panel: vscode.WebviewPanel): string {
    const htmlPath = path.join(context.extensionPath, 'src', 'webview', 'workflow_editor', 'workflow_editor.html');
    let htmlContent = fs.readFileSync(htmlPath, 'utf8');

    // Common CSS
    const commonCssPath = path.join(context.extensionPath, 'src', 'webview', 'common', 'common.css');
    const commonCssUri = panel.webview.asWebviewUri(vscode.Uri.file(commonCssPath));
    htmlContent = htmlContent.replace('href="../common/common.css"', `href="${commonCssUri}"`);

    // Page-specific CSS
    const pageCssPath = path.join(context.extensionPath, 'src', 'webview', 'workflow_editor', 'workflow_editor.css');
    const pageCssUri = panel.webview.asWebviewUri(vscode.Uri.file(pageCssPath));
    htmlContent = htmlContent.replace('href="workflow_editor.css"', `href="${pageCssUri}"`);

    return htmlContent;
  }
}

export function deactivate() {
  console.log('üì¥ GitHub Actions ÌôïÏû• Ï¢ÖÎ£åÎê®');
}
